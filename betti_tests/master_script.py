# This script works assuming that the command:
#	~/rivet/scripts$ python3 generate_points.py
# has been run. This script contains the rest of the timing pipeline; running it will
# produce the necessary Macaulay2 and Singular files, and perform all the timing computations.
# Note that the bifiltration time for RIVET is computed incorrectly -- currently, the RIVET code will
# default to setting it to 0.

# Note that the number of points to be generated is indicated in the file generate_points.py,
# but the number of files to generate for each number of points is indicated in the file
# points_noisy_circle.py.

import os
primes = [2, 13] # These are the prime fields to collect timing data for.

# We now have a bunch of text files with RIVET data. The next step collects the timing data for 
# RIVET, as well as produce the corresponding Macaulay2 files.
# This script will print out some error messages -- in particular, some .txt files that aren't data
# may be in this directory, and the script will try to make directories that already exist. Neither
# error affects the performance of the script.
# NOTE: Unfortunately, running this line will always produce a new copy of the Macaulay2 files.
# 		Changing that would likely require modifying the RIVET code used to write the files.
for prime in primes:
	os.system("python3 make_M2_files.py %d" % prime)

# Some Macaulay2 files have trivial components when computed using 0th homology.
# This script simplifies the files where appropriate.
os.system("python3 reduce_0_homol.py")

# Produce the Singular files, using the contents of the Macaulay2 files. This script prints out error messages
# when things go wrong -- those error messages usually correctly indicate that some problem occurred.
# NOTE: This script will only work on files that were generated by the modified version of RIVET --
# 		it makes several assumptions about the formatting of the Macaulay2 files. It should also be noted
# 		that this script is designed to run AFTER the 0th homology files have been "reduced".
os.system("python3 singly_graded/m2_to_singular.py")

# These two scripts run all of the Macaulay2 and Singular files and collect the timing data for them.
# NOTE: These scripts make assumptions about the format of the file names. For instance, consider the file:
#			noisy_circle_0_pts_20_mod_2_homol_1_bigraded.m2
# 		The script splits the name of the file on the character '_', and then takes the number of points from the
# 		4th word (starting with index 0), the prime field from the 6th, and the homology degree from the 8th. For
# 		this example, the file contains data from 20 points, does mod 2 computations, and uses 1st homology.
#		The first '0' in the name is just to distinguish it from other sets of points in the same category.
os.system("python3 time_M2.py")
os.system("python3 time_Singular.py")

# This script takes the various text files (which contain several times per trial) and averages the collected data.
# For example, it first goes through the rivet_timing.txt file, and for each choice of number of points, homology,
# and prime field, computes the average time each step of the computation took. It outputs a file timings.csv.
os.system("python3 statistics.py")
